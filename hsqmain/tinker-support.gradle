apply plugin: 'com.tencent.bugly.tinker-support'

def bakPath = file("${buildDir}/bakApk/")

//by sqhan
// 正常情況下不改下面的，打补丁包的时候需要将此处改为CtripMain/build/bakApk/CtripMain-XXXX-XX-XX-XX
//打包的时候要把要修复的原始版本放到bakApk目录下面作为对比。
def baseApkDir = "hsqmain-0920-16-02-29"


tinkerSupport {


    // 开启tinker-support插件，默认值true
    enable = true

    // tinkerEnable功能开关
    tinkerEnable = true


    autoBackupApkDir = "${bakPath}"

    // 是否启用覆盖tinkerPatch配置功能，默认值false
    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
    overrideTinkerPatchConfiguration = true

    //1，后面的apk设置为基线版本的名字
    baseApk = "${bakPath}/${baseApkDir}/app_v1.0.0_2017-09-20_release.apk"

    //baseApkProguardMapping = "${bakPath}/${baseApkDir}/CtripMain-release-R.txt"

    //2，后面的XX-R.txt设置为基线版本R文件的名字，这里基本都是名字为CtripMain-release-R.txt
    baseApkResourceMapping = "${bakPath}/${baseApkDir}/hsqmain-release-R.txt"

    //3，打线上release包时要修改这里为X.X.X-base作为热修复的目标版本识别；
    // 热修复的时候修改为对应的"X.X.X-patch"，或其它与其它所有基线版本不同的名字，没有固定样式。
    tinkerId = "1.0.0-base"
//    tinkerId = "1.0.0-patch"

    // 打多渠道补丁时指定目录
    //buildAllFlavorsDir = "${bakPath}/${baseApkDir}"

    enableProxyApplication = true

}

//下面的不要修改
tinkerPatch {
    ignoreWarning = false
    useSign = true
    dex {
        dexMode = "jar"
        pattern = ["classes*.dex"]
        loader = []
    }
    lib {
        pattern = ["lib/*/*.so"]
    }

    res {
        pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        ignoreChange = []
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//        path = "/usr/local/bin/7za"
    }
    buildConfig {
        keepDexApply = false
    }
}
